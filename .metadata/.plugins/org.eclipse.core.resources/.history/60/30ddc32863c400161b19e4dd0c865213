package interrupt;

import java.io.IOException;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousCloseException;
import java.nio.channels.Channel;
import java.nio.channels.ClosedByInterruptException;
import java.nio.channels.SocketChannel;

public class NIOInterruption {

}

class NIOBlocked implements Runnable {
	private final SocketChannel sc;

	public NIOBlocked(SocketChannel channel) {
		this.sc = channel;
	}

	@Override
	public void run() {
		try {
			System.out.println( "Waiting for read() in " + this );
			sc.read( ByteBuffer.allocate( 20 ) );
		} catch( ClosedByInterruptException e ) {
			System.out.println( "ClosedByInterruptException" );
		} catch( AsynchronousCloseException e ) {
			System.out.println( "AsynchronousCloseException" );
		}catch (IOException e) {
			System.out.println( "IOException" );
		}
	}
}
