package newcomponent;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.PriorityBlockingQueue;

public class PriorityBlockingQueueDemo {
	public static void main(String[] args) throws InterruptedException {

		Random rand = new Random( 67 );
		ExecutorService exec = Executors.newFixedThreadPool( 4 );
		PriorityBlockingQueue<Runnable> q = new PriorityBlockingQueue<>();

		// exec.execute( new PriorityTaskProducer( q, exec ) );
		// Thread.sleep( 2000 );
		// exec.execute( new PriorityTaskConsumer( q ) );

		// BUG版本
		exec.execute( new PriorityTaskConsumer( q ) );
		exec.execute( new PriorityTaskProducer( q, exec ) );
	}
}

class PriorityTaskProducer implements Runnable {

	private static Random rand = new Random( 67 );
	// 按优先级顺序存放任务的队列
	private PriorityBlockingQueue<Runnable> q;
	// 管理所有任务,给该队列的最后一个元素使用
	private ExecutorService exec;

	public PriorityTaskProducer(PriorityBlockingQueue<Runnable> q, ExecutorService exec) {
		this.q = q;
		this.exec = exec;
	}

	@Override
	public void run() {

		// 添加10个任务,随机分配优先级
		for( int i = 0; i < 3; i++ ) {
			q.put( new PriorityTask( rand.nextInt( 10 ) ) );
			Thread.yield();
		}

		// 再添加一堆任务
		try {
			for( int i = 0; i < 3; i++ ) {
				Thread.sleep( 250 );
				q.put( new PriorityTask( 10 ) );
			}

			for( int i = 0; i < 3; i++ ) {
				q.put( new PriorityTask( i ) );
			}

			// 务必要添加用于管理所有任务的任务
			q.add( new PriorityTask.EndSentinel( exec ) );

		} catch( InterruptedException e ) {
			// 可接受方式退出,省略不写
		}
		System.out.println( "Finish PriorityTaskProducer" );
	}
}

class PriorityTaskConsumer implements Runnable {

	// 优先级队列
	private PriorityBlockingQueue<Runnable> q;

	public PriorityTaskConsumer(PriorityBlockingQueue<Runnable> q) {
		this.q = q;
	}

	@Override
	public void run() {
		try {
			while( !Thread.interrupted() ) {
				q.take().run(); // 取出优先级队列头的任务,然后调用它的run方法,注意:并没有创建新的线程
			}
		} catch( InterruptedException e ) {
			// 可接受方式退出,省略不写
		}
		System.out.println( "Finish PriorityTaskConsumer" );
	}
}

class PriorityTask implements Runnable, Comparable<PriorityTask> {

	private static int count = 0;
	private final int id = count++;
	private static Random rand = new Random( 67 );

	// 记录创建的顺序,用于和实际顺序做比较
	protected static List<PriorityTask> sequenceTasks = new ArrayList<>();
	private final int priority;

	public PriorityTask(int priority) {
		this.priority = priority;
		sequenceTasks.add( this );
	}

	@Override
	// 线程A和B,如果A.comareTo(B)返回值为-1,那么将优先调用A
	public int compareTo(PriorityTask that) {
		if ( this.priority < that.priority )
			return -1;
		if ( this.priority > that.priority )
			return 1;
		return 0;
	}

	@Override
	public void run() {
		try {
			Thread.sleep( rand.nextInt( 250 ) );
			System.out.println( "消费队列的顺序：" + this );
		} catch( InterruptedException e ) {
			// 可接受的方式退出
		}
	}

	@Override
	public String toString() {
		return "[优先级:" + priority + " Task标志:" + id + "]";
	}

	// 惯用方法,必须确保该任务是队列中最后一个元素,好对前面的任务进行管理
	public static class EndSentinel extends PriorityTask {

		private ExecutorService exec;

		public EndSentinel(ExecutorService exec) {
			super( -1 );
			this.exec = exec;
		}

		@Override
		public void run() {
			for( PriorityTask t : sequenceTasks )
				System.out.println( "创建队列顺序：" + t );
			System.out.println( "Call shutdownNow() " + sequenceTasks.size() );
			exec.shutdownNow();
		}
	}
}
