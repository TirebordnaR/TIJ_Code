package multidispatching;

public enum RoShamBo2 implements Competitor<RoShamBo2>{
	Paper(Outcome.DRAW,Outcome.LOSE,Outcome.WIN),
	Scissors(Outcome.WIN,Outcome.DRAW,Outcome.LOSE),
	Rock(Outcome.LOSE,Outcome.WIN,Outcome.DRAW);
	 
	private Outcome vPaper, vScissors, vRock;
	private RoShamBo2(Outcome vPaper, Outcome vScissors, Outcome vRock) {
		this.vPaper = vPaper;
		this.vScissors = vScissors;
		this.vRock = vRock;
	}
	
	@Override
	public Outcome match(Competitor<RoShamBo2> that) {
		switch( that ){
		case value:
			
			break;

		default:
			break;
		}
	}

}

interface Competitor<T extends Competitor<T>>{
	Outcome match(Competitor<T> that);
}

