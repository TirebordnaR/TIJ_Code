package deadlock;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

// 
public class FixDeadLockPhilosophers {

	public static void main(String[] args) throws InterruptedException {

		int phoSize = 2; // 哲学家人数 = 筷子总数
		int choSize = phoSize; // 筷子总数
		int factor = 0; // 影响因子,值越大,那么哲学家吃饭和思考需要的时间越大(统计上来说)

		Philosopher[] phos = new Philosopher[phoSize];
		Chopstick[] chops = new Chopstick[choSize];

		for( int i = 0; i < choSize; i++ ) {
			chops[i] = new Chopstick();
		}

		for( int i = 0; i < phoSize; i++ ) {
			// 每个哲学家先拿右边的筷子,再拿左边的筷子,这可能会导致死锁
			// 可以打破循环等待,比如最后一个哲学家不按照先拿右边再拿左边筷子的规则来,改为先拿左边再拿右边
			if(i != phoSize-1)
				phos[i] = new Philosopher( chops[i], chops[(i + 1) % choSize], i, factor );
			else
				phos[i] = new Philosopher( chops[(i + 1) % choSize], chops[i], i, factor );
		}

		ExecutorService exec = Executors.newCachedThreadPool();
		for( int i = 0; i < phoSize; i++ ) {
			exec.execute( phos[i] );
		}

		Thread.sleep( 500000 );
		exec.shutdownNow();
	}

}
