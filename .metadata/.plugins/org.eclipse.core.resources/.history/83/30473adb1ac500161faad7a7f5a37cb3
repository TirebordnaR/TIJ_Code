package newcomponent;

import java.util.Random;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

public class CyclicBarrierDemo {
	
	public static void main(String[] args) {
		
	}
	
}

class Horse implements Runnable {
	private static int count = 0;
	private final int id = count++;
	private int distance = 0; // 马走过的距离

	private static Random rand = new Random( 67 );
	private CyclicBarrier barrier;

	public Horse(CyclicBarrier barrier) {
		this.barrier = barrier;
	}

	public int getStrides() {
		return distance;
	}

	@Override
	public void run() {
		try {
			while( !Thread.interrupted() ) {
				distance += rand.nextInt( 3 );
			}
			//
			barrier.await();
		} catch( InterruptedException e ) {
			System.out.println( "normal exiting" );
		} catch( BrokenBarrierException e ) {
			throw new RuntimeException();
		}
	}
}
