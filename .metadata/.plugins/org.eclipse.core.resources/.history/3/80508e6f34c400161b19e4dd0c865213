package interrupt;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

public class Interrupting {

}

// 因为sleep调用而进入的阻塞可以被中断
class SleepBlocked implements Runnable {
	@Override
	public void run() {
		try {
			TimeUnit.SECONDS.sleep( 100 );
		} catch( InterruptedException e ) {
			System.out.println( "InterruptedException..." );
		}
		System.out.println( "exiting SleepBlocked run()..." );
	}
}

class IOBlocked implements Runnable {
	private InputStream in;

	public IOBlocked(InputStream in) {
		this.in = in;
	}

	@Override
	public void run() {
		try {
			System.out.println( "waiting for read..." );
			in.read();
		} catch( IOException e ) {
			if ( Thread.currentThread().isInterrupted() )
				System.out.println( "Interrupted from blocked I/O" );
			else {
				System.out.println( "Intertupt are NOT from blocked I/O" );
				throw new RuntimeException();
			}
		}

	}

}
