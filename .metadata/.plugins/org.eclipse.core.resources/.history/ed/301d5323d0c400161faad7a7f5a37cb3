package cooperate;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class WaxOMatic {
	public static void main(String[] args) throws InterruptedException {
		Car car = new Car();
		ExecutorService exec = Executors.newCachedThreadPool();
		exec.execute( new WaxOff( car ) );
		exec.execute( new WaxOn( car ) );

		Thread.sleep( 5000 ); // 5s
		exec.shutdownNow();
	}
}

class Car {

	// Car初始状态,
	private boolean waxOn = false;

	// 对Car进行打蜡
	public synchronized void waxed() {
		waxOn = true;
		notifyAll();
	}

	// 对Car进行抛光,回到初始状态
	public synchronized void buffed() {
		waxOn = false;
		notifyAll();
	}

	public synchronized void waitForWaxing() throws InterruptedException {
		while( waxOn == false )
			wait();
	}

	public synchronized void waitForBuffing() throws InterruptedException {
		while( waxOn == true )
			wait();
	}
}

class WaxOn implements Runnable {
	private Car car;

	public WaxOn(Car car) {
		this.car = car;
	}

	@Override
	public void run() {
		try {
			while( !Thread.interrupted() ) {
				System.out.println( "Wax On." );
				// Thread.sleep( 200 );// 200ms
				car.waxed();
				Thread.sleep( 1000 );
				car.waitForBuffing();
			}
		} catch( InterruptedException e ) {
			System.out.println( "Exiting via Interrupt" );
		}
		System.out.println( "Exiting via WaxOn.run()" );
	}
}

class WaxOff implements Runnable {
	private Car car;

	public WaxOff(Car car) {
		this.car = car;
	}

	@Override
	public void run() {
		try {
			while( !Thread.interrupted() ) {
				car.waitForWaxing();
				System.out.println( "Wax Off." );
				Thread.sleep( 200 );// 200ms
				System.out.println( "Wax off Sleep over" );
				car.buffed();
			}
		} catch( InterruptedException e ) {
			System.out.println( "Exiting via Interrupt" );
		}
		System.out.println( "Exiting via WaxOn.run()" );
	}
}
