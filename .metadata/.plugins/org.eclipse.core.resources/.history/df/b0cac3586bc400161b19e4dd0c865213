package interrupt;

import java.util.concurrent.TimeUnit;

public class InterruptingIdiom {
	public static void main(String[] args) throws InterruptedException {

		Thread t = new Thread( new Blocked() );
		t.start();

		// 调整时间,可以在t线程的不同地方被中断,而t线程会通过InterruptedException来处理
		// 因此t线程要注意资源的清理
		Thread.sleep( 122 );
		t.interrupt();
	}
}

// 模拟需要清理的资源
class NeedsCleanup {
	private final int id;

	public NeedsCleanup(int id) {
		this.id = id;
		System.out.println( "NeedsCleanup " + id );
	}

	public void cleanup() {
		System.out.println( "Cleaning up " + id );
	}
}

// 线程如果经过异常离开循环时,要特别注意资源的清理
class Blocked implements Runnable {
	private double d = 0.0;

	@Override
	public void run() {
		try {
			while( !Thread.interrupted() ) {

				// point1:中断点在point1和point2之间,经由InterruptedExceptio退出
				NeedsCleanup n1 = new NeedsCleanup( 1 );
				try {
					System.out.println( "sleeping..." );
					TimeUnit.SECONDS.sleep( 1 );

					// point2
					NeedsCleanup n2 = new NeedsCleanup( 2 );
					try {
						System.out.println( "do some calculating" );
						for( int i = 0; i < 2500000; i++ ) {
							d = d + (Math.PI + Math.E) / d;
						}
						System.out.println( "Finished time-consuming operation..." );
					} finally {
						n2.cleanup();
					}
				} finally {
					n1.cleanup();
				}
			}
			System.out.println( "Exiting via while() test" );
		} catch( InterruptedException e ) {
			System.out.println( "Exiting via InteruuptedException" );
		}
	}
}
