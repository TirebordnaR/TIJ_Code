package newcomponent;

import java.text.spi.CollatorProvider;
import java.util.Collections;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

// 使用信号量时,acquire和release成功的数量要一致
public class SemaphoreDemo {

	public static void main(String[] args) throws InterruptedException {

		int POOL_SIZE = 5;
		int THREAD_SIZE = 10;

		final PoolForSemaphore<FatForSemaphore> pool = new PoolForSemaphore<>( FatForSemaphore.class, POOL_SIZE );

		ExecutorService exec = Executors.newCachedThreadPool();
		for( int i = 0; i < THREAD_SIZE; i++ ) {
			exec.execute( new CheckOutInTask<FatForSemaphore>( pool ) );
		}

		System.out.println( "All checkedOutInTask created..." );
	}
}

class CheckOutInTask<T> implements Runnable {

	private static int count = 0;
	private final int id = count++;

	private PoolForSemaphore<T> pool;

	public CheckOutInTask(PoolForSemaphore<T> pool) {
		this.pool = pool;
	}

	@Override
	public void run() {
		try {
			T item = pool.checkedOut();
			System.out.println( this + " checkedOut " + item );
			Thread.sleep( 1000 );
			System.out.println( this + " checking in " + item );
			pool.checkedIn( item );
		} catch( InterruptedException e ) {
			// 这里需要写：一些清理资源等的代码,只要能正常退出即可
		}
	}

	@Override
	public String toString() {
		return "CheckOutTask " + id + " ";
	}
}
