package multidispatching;

// 多路分发
public class RoShamBo1 {
	public static void main(String[] args) {
		int ROUND = 20;
		
		Random rand = new Random(67);
	}
	
	public static Item newItem(){
		switch( key ){
		case value:
			
			break;

		default:
			break;
		}
	}
}

enum Outcome {
	WIN, LOSE, DRAW
}

interface Item {
	Outcome compete(Item it);

	Outcome eval(Paper p);

	Outcome eval(Scissors p);

	Outcome eval(Rock p);
}

class Paper implements Item {

	@Override
	public Outcome compete(Item it) {
		return it.eval( this );
	}

	@Override
	public Outcome eval(Paper p) {
		return Outcome.DRAW;
	}

	@Override
	public Outcome eval(Scissors p) {
		return Outcome.WIN;
	}

	@Override
	public Outcome eval(Rock p) {
		return Outcome.LOSE;
	}

}

class Scissors implements Item {

	@Override
	public Outcome compete(Item it) {
		return it.eval( this );
	}

	@Override
	public Outcome eval(Paper p) {
		return Outcome.DRAW;
	}

	@Override
	public Outcome eval(Scissors p) {
		return Outcome.WIN;
	}

	@Override
	public Outcome eval(Rock p) {
		return Outcome.LOSE;
	}
}

class Rock implements Item {

	@Override
	public Outcome compete(Item it) {
		return it.eval( this );
	}

	@Override
	public Outcome eval(Paper p) {
		return Outcome.DRAW;
	}

	@Override
	public Outcome eval(Scissors p) {
		return Outcome.WIN;
	}

	@Override
	public Outcome eval(Rock p) {
		return Outcome.LOSE;
	}
}


