package newcomponent;

import java.util.List;
import java.util.concurrent.Exchanger;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ExchangerDemo {

	public static final int SIZE = 10;

	public static void main(String[] args) {
		ExecutorService exec = Executors.newCachedThreadPool();
		Exchanger<FatForSemaphore> exchanger = new Exchanger<>();
	}

}

class Producer implements Runnable {

	private Exchanger<List<FatForSemaphore>> exchanger;
	private List<FatForSemaphore> holder;

	public Producer(Exchanger<List<FatForSemaphore>> exchanger, List<FatForSemaphore> holder) {
		this.exchanger = exchanger;
		this.holder = holder;
	}

	@Override
	public void run() {
		try {
			while( !Thread.interrupted() ) {

				// 生产东西
				for( int i = 0; i < ExchangerDemo.SIZE; i++ ) {
					holder.add( new FatForSemaphore() );
				}

				holder = exchanger.exchange( holder );
			}
		} catch( InterruptedException e ) {
			// 省略了一些必要的清理工作
		}
	}
}

class Consumer implements Runnable {

	private Exchanger<List<FatForSemaphore>> exchanger;
	private List<FatForSemaphore> holder;

	public Consumer(Exchanger<List<FatForSemaphore>> exchanger, List<FatForSemaphore> holder) {
		this.exchanger = exchanger;
		this.holder = holder;
	}

	@Override
	public void run() {
		try {
			while( !Thread.interrupted() ) {
				holder = exchanger.exchange( holder );

				// 消费接收到的数据(清空holder)
				for( FatForSemaphore f : holder ) {
					System.out.println( f );
					holder.remove( f ); // 只有CopyOnWriteList等其他特殊的List才能在遍历的时候做修改
				}
			}
		} catch( InterruptedException e ) {
			// 省略了一些必要的清理工作
		}
	}
}
