package cooperate;

import javax.swing.plaf.synth.SynthSpinnerUI;

public class Car {

	private boolean waxOn = false;

	public synchronized void waxed() {
		waxOn = true;
		notifyAll();
	}

	public synchronized void buffed() {
		waxOn = false;
		notifyAll();
	}

	public synchronized void waitForWaxing() throws InterruptedException {
		while( waxOn == false )
			wait();
	}

	public synchronized void waitForBuffing() throws InterruptedException {
		while( waxOn == true )
			wait();
	}
}

class WaxOn implements Runnable {
	private Car car;

	public WaxOn(Car car) {
		this.car = car;
	}

	@Override
	public void run() {
		try {
			while( !Thread.interrupted() ) {
				System.out.println( "Wax On." );
				Thread.sleep( 200 );// 200ms
				car.waxed();
				car.waitForBuffing();
			}
		} catch( InterruptedException e ) {
			System.out.println( "Exiting via Interrupt" );
		}
		System.out.println( "Exiting via end of WaxOn.run()" );
	}

}
