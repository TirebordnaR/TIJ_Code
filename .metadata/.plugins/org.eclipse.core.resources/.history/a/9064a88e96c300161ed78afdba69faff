package basic;

import java.lang.Thread.UncaughtExceptionHandler;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

// 对于线程,一旦异常逃出任务的run方法,如果之前没有采取措施,那么永远无法被捕获到
// 可以自定义一个异常实现Thread.UncaughtExceptionHandler对每个线程添加异常处理器
// 当线程因为未捕获的异常而快要死亡时,就会调用该异常处理器
public class CaptureThreadException {

	public static Integer a = 1;

	public static void main(String[] args) {

		ExecutorService exec = Executors.newCachedThreadPool( new WithHandlerThreadFactory() );
		exec.execute( new WithExceptionThread() );
		exec.execute( new WithExceptionThread() );
		exec.execute( new WithExceptionThread() );
		exec.shutdown();

	}
}

class MyThreadExceptionHandler implements UncaughtExceptionHandler {
	@Override
	public void uncaughtException(Thread t, Throwable e) {
		System.out.println( t + " caguht " + t + ":" + e );
	}
}

class WithHandlerThreadFactory implements ThreadFactory {

	@Override
	public Thread newThread(Runnable r) {
		Thread t = new Thread( r );
		// 对线程设置异常处理器
		t.setUncaughtExceptionHandler( new MyThreadExceptionHandler() );
		System.out.println( t + " add Handler " + t.getUncaughtExceptionHandler() );
		return t;
	}
}

class WithExceptionThread implements Runnable {
	@Override
	public void run() {
		throw new RuntimeException();
	}
}